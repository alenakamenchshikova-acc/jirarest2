#!/usr/bin/env ruby

#    Copyright (C) 2012 Cyril Bitterich
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


require "jirarest2bin"
require "pp"

# Check for the minimum ruby version we need
Jirarest2Bin::check_ruby_version

class ParseOptions

=begin
  Parse the command line parameters
  @return [Array] returns two hashes. The first one contains the options for the issue, the second one for the execution of the script
=end
  def self.parse(args)
    issueopts = OpenStruct.new
    scriptopts = OpenStruct.new
    scriptopts.configfile = "~/.jiraconfig"
    scriptopts.ofs = "\n"
      
    
    opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{__FILE__} [options]"
      scriptopts = Jirarest2Bin::defaultoptions(opts,scriptopts)

      opts.on("-i", "--issue ISSUE,ISSUE,...", Array, "Issues to work on") do |i|
        issueopts.issues = i
      end

      opts.on("-d", "--id COMMENTID", "ID number of the comment (for remove and set/update)") do |i| 
        issueopts.commentid = i
      end

      opts.on("-t", "--text TEXT", "Text for the comment to add/update") do |w|
        issueopts.text = w
      end
      
      opts.on("-c", "--command [command]",[:add,:remove,:view,:get,:set,:update], "What to do with the comment(s) on the issues (add, remove,set)") do |c|
        c = :set if c == :update
        c = :get if c == :view
        scriptopts.command = c
      end
      
      opts.on("-O", "--field-seperator CHAR", "Output field separator. Set this if you want the output to be formatted in one line for example.") do |ofs|
        scriptopts.ofs = ofs
      end
      
      opts.on("-v", "--verbose", "Tell what I did in great detail") do |v|
        scriptopts.verbose = v
      end
    end # OptionParser.new
    
    opts.parse!(args)
    return issueopts, scriptopts
    
  end #parse
end # class

@issueopts, @scriptopts = ParseOptions.parse(ARGV)

# Print the issues to STDOUT
# We use the instance-varable @scriptopts.ofs here
# @param [String] issue The Key of the Issue these comments belong to
# @param [Array(CommentElement)] results An Array of CommentElement 
def print_results(issue,results)
  output = Array.new
  if results.size == 0 then
    output << "There are no comments for #{issue}."
  else
    output << "Comment(s) for #{issue}:"
  end
  results.each { |result| 
    output << result.text
    output <<  "Created on #{result.cdate.to_s}"
    output << "Last written by: #{result.author} on #{result.mdate.to_s}"
  }
  puts output.join(@scriptopts.ofs)
  
end

# Calls the issues and get the comments of each issue in return.
# @param [Array] issues An Array containing the issuekeys
# @param [Fixnum] id Identidication number of the comment to view
def view_comments(issues,id = nil)
  connection = Jirarest2Bin::get_connection(@scriptopts,@connection)
  result = Array.new
  if id.nil? then
    issues.each { |issue|
      connectedissue = Comment.new(connection,issue)
      result << connectedissue.get
      print_results(issue,result.flatten.compact)
    }
  else
    connectedissue = Comment.new(connection,issues[0],id)
    result << connectedissue.get
    print_results(issues,result.flatten.compact)
  end
end

# Calls the issues and runs the needed work on it with the given users by opening the connection to the server, looking for the issue identified by the key and executing the string
# @param [Array] issues Issues to work with
# @param [Array] text Text to work with
# @param [String] method Kind of work to be done
# @param [Fixnum] id Identifier of the comment
def work(issues,text,method,id = nil)
  connection = Jirarest2Bin::get_connection(@scriptopts,@connection)
  issues.each{ |issue|
    connectedissue = Comment.new(connection, issue, id)
    connectedissue.send method, text
    if @scriptopts.verbose then
      if id.nil? then
        puts "Used #{method} on issue #{issue}" 
      else
        puts "Used #{method} on the comment #{id} on issue #{issue}" 
      end
    end
  }
end

if @scriptopts.writeconf then
  Jirarest2Bin::write_configfile(@scriptopts)
end

Jirarest2Bin::required_argument("issue") if @issueopts.issues.nil?
case @scriptopts.command
when :add
  Jirarest2Bin::required_argument("text") if @issueopts.text.nil?
  work(@issueopts.issues,@issueopts.text,"add")
when :remove
  Jirarest2Bin::required_argument("id") if @issueopts.commentid.nil?
  work(@issueopts.issues,"","delete",@issueopts.commentid)
when :set
  Jirarest2Bin::required_argument("id") if @issueopts.commentid.nil?
  Jirarest2Bin::required_argument("text") if @issueopts.text.nil?
  work(@issueopts.issues,@issueopts.text,"update",@issueopts.commentid)
when :get
  view_comments(@issueopts.issues, @issueopts.commentid)
else
  puts "Don't know what to do. Please set -c"
end

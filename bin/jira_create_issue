#!/usr/bin/env ruby

# Script to create a new issue with jira.
#    Copyright (C) 2012 Cyril Bitterich
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require "jirarest2bin"
require "pp"

# Check for the minimum ruby version we need
Jirarest2Bin::check_ruby_version

class ParseOptions
  
  #print to Variants of a JSON file that we both take in as input with -C
  def self.print_json_input
    fullExample = '{
   "metadata":{
      "project":"SP",
      "issue":"Bug",
      "link":{ "SP-13":"blocks" },
      "watcher":["test","admin"]
   },
   "content":{
      "Summary":"Your Summary",
      "Priority":"Trivial"
   }
}'
    smallExample = '{
   "Summary" : "Your Summary",
   "Priority" : "Trivial"
}'
    division = '--------------------------------------------------------'
    puts division
    puts "There are two ways you can input data via -C ."
    puts "Here are two examples to build from. "
    puts division
    puts "Using the command line parameters -p, -i, -l and/or -w :"
    puts smallExample
    puts division
    puts "Without the need for any other command line parameters:"
    puts fullExample
    puts '"watcher" always needs to be an array. No matter how many entries you got.'
    puts "You can even mix command line and -C . In this case -C will take precendence." 
  end


  def self.required_argument(name)
    puts "Argument \"#{name}\" is mandatory."
    exit 1
  end

=begin
  parse returns two Hashes. The first one contains the options for the issue the second one the options for the execution of the script.
=end
  def self.parse(args)
    issueopts = OpenStruct.new
    issueopts.project = nil
    issueopts.issue = nil
    scriptopts = OpenStruct.new
    scriptopts.show = []
    scriptopts.arrayseperator = "|"
    scriptopts.configfile = "~/.jiraconfig"
    
    opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{__FILE__} [options]"
      opts.separator ""
      
      opts.on("-p", "--project PROJECT", "Projectname") do |p|
        issueopts.project = p
        issueopts
      end
      
      opts.on("-i", "--issue ISSUETYPE", "Issuetype") do |i|
        issueopts.issue = i
      end
      
      opts.on("-f", "--fields", "Display the fields available for this issue") do |f|
        scriptopts.show << "fields"
      end
      
      opts.on("-r", "--requireds", "Display the the mandatory content fields for this issue") do |r|
        scriptopts.show << "requireds"
      end
      
      opts.on("-c", "--content x=value,y=value,z=value", Array, "List of fields to fill") do |list|
        issueopts.content = list
      end
      
      opts.on("-C", "--content-file FILENAME", "JSON formatted file (or \"-\" for STDIN). The file can contain just -c or -c, -i and -p. (Pipes only work if URL,username AND password are in the CONFIGFILE!)") do |contentfile|
        scriptopts.contentfile = contentfile
      end
      
      opts.on("-w", "--watcher USERNAME,USERNAME", Array, "List of watchers") do |w|
        issueopts.watchers = w
      end
      
      opts.on("-l", "--link ISSUEKEY=LINKTYPE", "Key of an Issue this issue should be linked to" ) do |l|
        scriptopts.linkdestkey, scriptopts.linktype = l.split("=")
      end
      
      opts.on("-F", "--field-seperator CHAR", "A fieldseperator if one of the fields is an array (Default \"|\")") do |fs|
        scriptopts.arrayseperator = fs
      end

      
      opts.on("--config-file CONFIGFILE", "Config file containing the jira credentials. (Default: ~/.jiraconfig)") do |conffile|
        scriptopts.configfile = conffile
      end
      
      opts.on("--write-config-file", "Writes the configfile with the data given if it does not alredy exist.") do |wc|
        scriptopts.writeconf = :write
      end

      opts.on("--force-write-config-file", "Writes the configfile with the data given even if it does alredy exist.") do |wc|
        scriptopts.writeconf = :forcewrite
      end
      

      opts.on("-u", "--username USERNAME", "Your Jira Username if you don't want to use the one in the master file") do |u|
        scriptopts.username = u 
      end
      
      opts.on("-H", "--jira-url URL", "URL to rest api (without \"/rest/api/2\").") do |url|
        uri = URI(url)
        splitURI = URI.split(url)
        if splitURI[3] then
          url = splitURI[0].to_s + "://" + splitURI[2].to_s + ":" + splitURI[3].to_s + splitURI[5].to_s
        else
          url = splitURI[0].to_s + "://" + splitURI[2].to_s + splitURI[5].to_s
        end
        scriptopts.url = url
      end

      opts.on_tail("--help-C", "Example input for -C") do
        print_json_input
        exit
      end
      opts.on_tail("-h", "--help", "Display this screen") do
        puts opts
        exit
      end
      
      opts.on_tail("--version", "Show version") do
        puts OptionParser::Version.join(".")
        exit
      end
    end
    
  
    opts.parse!(args)
    return issueopts, scriptopts
  end #parse()


end # class ParseOptions

@issueopts, @scriptopts = ParseOptions.parse(ARGV)


def no_issue(type,issue)
  puts "The #{type}type you entered (\"#{issue}\")  does no exist."
    puts "Maybe you entered the wrong type or made a typo? (Case is relevant!)"
    exit 1
end

=begin
 create the issue on our side
=end
def open_issue
  begin
    if @issueopts.project.nil?  then
      ParseOptions::required_argument("project")      
    end
    if @issueopts.issue.nil? then
      ParseOptions::required_argument("issue")
    end
    issue=Issue.new(@issueopts.project,@issueopts.issue,Jirarest2Bin::get_connection(@scriptopts,@connection))
  rescue Jirarest2::AuthentificationError => e
    puts "Password not accepted."
    @scriptopts.pass = Jirarest2Bin.get_password(@scriptopts.username)
    retry
  rescue Jirarest2::AuthentificationCaptchaError => e
    puts "Wrong Password too many times.\nCaptcha time at #{e.to_s} to reenable your account."
    exit 1
  rescue Jirarest2::WrongProjectException => e
    no_issue("project",e)
  rescue Jirarest2::WrongIssuetypeException => e
    no_issue("project",e)
  end
  return issue
end

=begin
 Show available fields and required fields
=end
def show_scheme
  issue = open_issue
  if @scriptopts.show.include?("fields") then
    print "Available fields: "
    puts issue.get_fieldnames.join(", ")
  end
  if @scriptopts.show.include?("requireds") then
    print "Required fields: "
    puts issue.get_requireds.join(", ")
  end
  exit
end

# Split the content from the command line parameter "-c"
def split_content(issue)
  fields = Hash.new
  @issueopts.content.each { |value|
    split = value.split("=")
    if issue.fieldtype(split[0]) == "array" then # If the fieldtype is an array we want to use our arrayseparator to split the fields
      if ! split[1].nil? then 
        split[1] = split[1].split(@scriptopts.arrayseperator)
      end
    end
    fields[split[0]] = split[1]
  }
  return fields
end

# interpret input from file or STDIN 
def get_jsondata_from_file
  data = MadbitConfig::read_configfile(@scriptopts.contentfile)
  content = Hash.new
  if  data["metadata"] then # We have metadata and content
    content = data["content"]
    pp "metadata"
    @issueopts.project = data["metadata"]["project"] if data["metadata"]["project"]
    @issueopts.issue = data["metadata"]["issue"] if data["metadata"]["issue"]
    pp data["metadata"]["watcher"].class
    pp data["metadata"]["watcher"]
    @issueopts.watchers = data["metadata"]["watcher"] if data["metadata"]["watcher"]
    pp data["metadata"]["link"]
    @scriptopts.linkdestkey, @scriptopts.linktype = data["metadata"]["link"].flatten if data["metadata"]["link"]
  else # We have the simple format that carries only the content
    content = data
  end
  return content
end

#  Prepare a new ticket. It will not be persisted yet.
def prepare_new_ticket
  begin
    if @scriptopts.contentfile then
      #Input from file or STDIN
      puts "Your Input now"
      fields = get_jsondata_from_file
      issue = open_issue
    else
      #Input from the command line
      issue = open_issue
      fields =  split_content(issue)
    end
    valueNotAllowedRaised = false
    fields.each { |name,value|
      issue.set_field(name,value) 
    }
  rescue JSON::ParserError => e
    raise JSON::ParserError, e # Maybe I want to make this nice sometimes
  rescue Jirarest2::WrongFieldnameException => e
    no_issue("field",e)
  rescue Jirarest2::ValueNotAllowedException => e
    puts "Value #{e} not allowed for field #{e.fieldname}."
    puts "Please use one of: \"" + e.allowed.join("\", \"") + "\""
    valueNotAllowedRaised = true
  end

  if valueNotAllowedRaised then
    puts "Exiting before trying to create an issue."
    exit 1
  end
  return issue
end

=begin
  a little bit to fine - could be put into the method below
=end
def set_watchers(issue)
  issue.set_watcher(credentials,@issueopts.watchers)
end

=begin
  do all the work to actually create a new ticket (persist, watchers, links) 
=end
def create_new_ticket(issue)
  begin
    connection = Jirarest2Bin::get_connection(@scriptopts,@connection) # We need it so often in the next few lines that I prefer to get the result in a variable
    result = issue.persist(connection).result
    # Set the watchers
    if @issueopts.watchers then
      watcherssuccess = issue.add_watchers(connection,@issueopts.watchers)
    end
  rescue Jirarest2::RequiredFieldNotSetException => e
    puts "Required field \"#{e.to_s}\" not set."
    return 1
  end
  if result["key"] then
    puts "Created new issue with issue id #{result["key"]} ."
    if ! watcherssuccess && @issueopts.watchers then
      puts "Watchers could not be set though."
    end
    begin
      if @scriptopts.linkdestkey then
        link = IssueLink.new(connection)
        linkresult = link.link(result["key"],@scriptopts.linkdestkey,@scriptopts.linktype)
      end
    rescue Jirarest2::ValueNotAllowedException => e
      puts "Link not created. Issuetype \"#{e.message}\" not valid."
      puts "Please use one of the these:"
      puts link.valid_issuelinktypes("\n")
      exit 1
    rescue Jirarest2::NotFoundError => e
      puts "Link not created. One of the issues not found. Jira says:"
      puts e.to_s
      exit 1
    end
    return 0
  elsif result["errors"] then
    puts "An error occured. The error message was: #{result["errors"].to_s}"
    return 2
  end
end

# The "main function"
if @scriptopts.show != [] then
  show_scheme
end
if @scriptopts.writeconf then
  Jirarest2Bin::write_configfile(@scriptopts)
end
if ! (@scriptopts.contentfile.nil? and @issueopts.content.nil?) then # If there is no content set it makes no sense to try to build a ticket
  content = prepare_new_ticket
  exit create_new_ticket(content)
end

